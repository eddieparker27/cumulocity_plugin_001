/* eslint-disable */
(function () {

  'use strict';

  var paramsId;
  var params;
  var uri;
  var socket;

  function getQueryParams(qs) {
    var params = {};
    var items;
    var re = /[?&]?([^=]+)=([^&]*)/g;
    qs = qs.split('+').join(' ');

    while (items = re.exec(qs)) {
      var itemName = items[1];
      var itemVal = items[2];
      params[decodeURIComponent(itemName)] = decodeURIComponent(itemVal);
    }

    return params;
  }

  function loadParams() {
    paramsId = getQueryParams(window.location.search).paramsId;
    try {
      params = JSON.parse(window.localStorage.getItem(paramsId));
    } catch (ex) {
      console.err('Cannot load connection parameters!');
    }
  }

  window.onload = function () {
    document.body.addEventListener('keydown', onkeydown);
    document.body.addEventListener('keyup', onkeyup);
    Terminal.applyAddon(fit);

    var insertPoint = document.getElementById('terminal');
    var term = new Terminal({
      fontSize: 18,
      fontFamily: 'consolas, monospace',
      cursorBlink: true
    });
    var shellAdapter = new ShellAdapter();
    var termType = "xterm";

    function onkeydown(event) {
      if (event.key === 'Control') {
        shellAdapter.setCtrlDown();
      }
    }

    function onkeyup(event) {
      if (event.key === 'Control') {
        shellAdapter.setCtrlUp();
      }
    }

    loadParams();
    document.title = unescape(params.title);
    uri = params.wsProtocol + '//' + params.host + '/' + params.path;

    term.open(insertPoint);
    term.fit();
    term.focus();

    shellAdapter.setTermType(termType);

    setTimeout(function () {
      //////////// /////////////////////////// RESIZE
      window.addEventListener('resize', function () {
        clearTimeout(window.resizeFinished);
        window.resizeFinished = setTimeout(function () {
          term.fit();
        }, 250);
      });

      socket = new WebSocket(uri, 'binary');
      socket.binaryType = 'arraybuffer';

      socket.onopen = function () {
        term.writeln('\u001b[32mSocket connection was established successfully \u001b[39m \r\n');
      };

      socket.onclose = function () {
        term.writeln('');
        term.writeln('\r\n\u001b[31mSocket connection was closed \u001b[39m \r\n');
      };

      //////////// /////////////////////////// RECEIVE
      socket.onmessage = function (message) {
        var filteredData = shellAdapter.filterReceiveData(message.data);
        if (filteredData.dataToSend.length) {
          socket.send(filteredData.dataToSend);
        }
        if (filteredData.dataToDisplay.length) {
          term.write(filteredData.dataToDisplay);
        }
      };

      //////////// /////////////////////////// SEND
      term.on('key', function (key, event) {
        var dataToSend = shellAdapter.filterSendData(event);

        if (dataToSend.length) {
          socket.send(dataToSend);
        }
      });

      ////////////////////////////////////// CLOSE CONNECTION
      window.onbeforeunload = function () {
        var stringToSend = 'exit\n';
        var sendQueue = [];
        for (var i = 0; i < stringToSend.length; i++) {
          sendQueue.push(stringToSend.charCodeAt(i));
        }
        socket.send(new Uint8Array(sendQueue));
      };
    });
  };
})();
