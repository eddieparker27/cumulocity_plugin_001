/* eslint-disable */
function ShellAdapter() {

  'use strict';

  var termType = '';
  var ctrlDown = false;

  var controlCodes = {
    '@': '\u0000', // NUL   Null
    'A': '\u0001', // SOH   Start of Heading — TC1 Transmission control character 1
    'B': '\u0002', // STX   Start of Text — TC2 Transmission control character 2
    'C': '\u0003', // ETX   End of Text — TC3 Transmission control character 3
    'D': '\u0004', // EOT   End of Transmission — TC4 Transmission control character 4
    'E': '\u0005', // ENQ   Enquiry — TC5 Transmission control character 5
    'F': '\u0006', // ACK   Acknowledge — TC6 Transmission control character 6
    'G': '\u0007', // BEL   Bell
    'H': '\u0008', // BS    Backspace — FE0 Format effector 0
    'I': '\u0009', // HT    Horizontal Tabulation — FE1 Format effector 1 (Character Tabulation)
    'J': '\u000A', // LF    Line Feed — FE2 Format effector 2
    'K': '\u000B', // VT    Vertical Tabulation — FE3 Format effector 3 (Line Tabulation)
    'L': '\u000C', // FF    Form Feed — FE4 Format effector 4
    'M': '\u000D', // CR    Carriage Return — FE5 Format effector 5
    'N': '\u000E', // SO    Shift Out — LS1 Locking-Shift One
    'O': '\u000F', // SI    Shift In — LS0 Locking-Shift Zero
    'P': '\u0010', // DLE   Data Link Escape — TC7 Transmission control character 7
    'Q': '\u0011', // DC1   Device Control 1 — XON
    'R': '\u0012', // DC2   Device Control 2
    'S': '\u0013', // DC3   Device Control 3 — XOFF
    'T': '\u0014', // DC4   Device Control 4 (Stop)
    'U': '\u0015', // NAK   Negative Acknowledge — TC8 Transmission control character 8
    'V': '\u0016', // SYN   Synchronous Idle — TC9 Transmission control character 9
    'W': '\u0017', // ETB   End of Transmission Block — TC10 Transmission control character 10
    'X': '\u0018', // CAN   Cancel
    'Y': '\u0019', // EM    End of Medium
    'Z': '\u001A', // SUB   Substitute
    '[': '\u001B', // ESC   Escape (The first character of an escape sequence)
    '\\':'\u001C', // FS    File Separator — IS4 Information separator 4
    ']': '\u001D', // GS    Group Separator — IS3 Information separator 3
    '^': '\u001E', // RS    Record Separator — IS2 Information separator 2
    '_': '\u001F'  // US    Unit Separator — IS1 Information separator 1
  };

  this.setCtrlDown = function () {
    ctrlDown = true;
  };

  this.setCtrlUp = function () {
    ctrlDown = false;
  };

  this.getTermType = function () {
    return termType;
  };

  this.setTermType = function (type) {
    termType = type;
  };

  function pushStr(str, arr) {
    for (var i = 0; i < str.length; i++) {
      arr.push(str.charCodeAt(i));
    }
  }

  this.filterReceiveData = function (data) {
    var arrUint8 = new Uint8Array(data);
    var arr = Array.prototype.slice.call(arrUint8);

    var sendQueue = [];
    var stringToDisplay = '';
    var chr = '';
    var code = '';
    var value = '';

    while (arr.length > 0) {
      chr = arr.shift();
      switch (chr) {
        case 255:   // IAC
          code = arr.shift();
          value = arr.shift();
          switch (code) {
            case 254: // DONT
              break;
            case 253: // DO
              if (value === 24) {
                // Terminal type
                sendQueue.push(255, 251, value);
              } else {
                // Refuse other DO requests with a WONT
                sendQueue.push(255, 252, value);
              }
              break;
            case 252: // WONT
              break;
            case 251: // WILL
              if (value === 1) {
                // Affirm echo with DO
                sendQueue.push(255, 253, value);
              } else {
                // Reject other WILL offers with a DONT
                sendQueue.push(255, 254, value);
              }
              break;
            case 250: // SB (subnegotiation)
              if (value === 24) {
                // TERM-TYPE subnegotiation
                if (arr[0] === 1 && arr[1] === 255 && arr[2] === 240) {
                  arr.shift(); arr.shift(); arr.shift();
                  sendQueue.push(255, 250, 24, 0);
                  pushStr(termType, sendQueue);
                  sendQueue.push(255, 240);
                } else {
                  console.warn("Invalid subnegotiation received" + arr)
                }
              } else {
                console.warn("Ignoring SB " + value)
              }
              break;
            default:
              break;
          }
          break;
        case 242:   // Data Mark (Synch)
          code = arr.shift();
          value = arr.shift();
          break;
        default:   // everything else
          stringToDisplay += String.fromCharCode(chr);
      }
    }

    return {
      dataToSend: sendQueue.length ? new Uint8Array(sendQueue) : '',
      dataToDisplay: stringToDisplay
    };
  };

  this.filterSendData = function (event) {
    var sendQueue = [];

    var stringToSend;

    switch (event.key) {
      case 'Shift':
        break;
      case 'Control':
        break;
      case 'Enter':
        stringToSend = '\n';
        break;
      case 'Backspace':
        stringToSend = '\x08';
        break;
      case 'Tab':
        stringToSend = '\t';
        break;
      case 'Escape':
        stringToSend = '\x1b';
        break;

      // NORMAL BROWSERS
      case 'ArrowLeft':
        stringToSend = '\x1b[D';
        break;
      case 'ArrowRight':
        stringToSend = '\x1b[C';
        break;
      case 'ArrowUp':
        stringToSend = '\x1b[A';
        break;
      case 'ArrowDown':
        stringToSend = '\x1b[B';
        break;
      case 'Delete':
        stringToSend = '\x1b[3\x7e';
        break;

      // IE 11
      case 'Left':
        stringToSend = '\x1b[D';
        break;
      case 'Right':
        stringToSend = '\x1b[C';
        break;
      case 'Up':
        stringToSend = '\x1b[A';
        break;
      case 'Down':
        stringToSend = '\x1b[B';
        break;
      case 'Spacebar':
        stringToSend = ' ';
        break;
      case 'Del':
        stringToSend = '\x1b[3\x7e';
        break;
      case 'Esc':
        stringToSend = '\x1b';
        break;

      default:
        stringToSend = event.key;
        if (ctrlDown && controlCodes[stringToSend.toUpperCase()]) {
          stringToSend = controlCodes[stringToSend.toUpperCase()];
        }
        break;
    }

    for (var i = 0; i < stringToSend.length; i++) {
      sendQueue.push(stringToSend.charCodeAt(i));
    }

    return sendQueue.length ? new Uint8Array(sendQueue) : '';
  };
};
